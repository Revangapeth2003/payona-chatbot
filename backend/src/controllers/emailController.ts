import nodemailer from 'nodemailer';
import { Request, Response } from 'express';
import { ApiResponse } from '../../types';

// Create transporter with your email configuration
const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER || 'your-email@gmail.com',
      pass: process.env.EMAIL_PASS || 'your-app-password'
    }
  });
};

// Send user data to admin email (payanaoverseas@gmail.com)
export const sendEmailToAdmin = async (userData: any, sessionId: string): Promise<void> => {
  try {
    const transporter = createTransporter();
    
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px;">
          🌍 New Lead from Payana Overseas Chatbot
        </h2>
        
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #e74c3c; margin-top: 0;">👤 User Information</h3>
          <table style="width: 100%; border-collapse: collapse;">
            <tr><td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Name:</strong></td><td style="padding: 8px; border-bottom: 1px solid #ddd;">${userData.name || 'Not provided'}</td></tr>
            <tr><td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Age:</strong></td><td style="padding: 8px; border-bottom: 1px solid #ddd;">${userData.age || 'Not provided'}</td></tr>
            <tr><td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Email:</strong></td><td style="padding: 8px; border-bottom: 1px solid #ddd;">${userData.email || 'Not provided'}</td></tr>
            <tr><td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>Purpose:</strong></td><td style="padding: 8px; border-bottom: 1px solid #ddd;">${userData.purpose || 'Not specified'}</td></tr>
          </table>
        </div>
        
        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd;">
          <p style="color: #666;">Generated by Payana Overseas Chatbot System</p>
        </div>
      </div>
    `;
    
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: 'payanaoverseas@gmail.com',
      subject: `🌍 New Lead: ${userData.name} - ${userData.purpose || 'Inquiry'}`,
      html: htmlContent
    };
    
    await transporter.sendMail(mailOptions);
    console.log('✅ Admin email sent successfully');
  } catch (error) {
    console.error('❌ Error sending admin email:', error);
    throw error;
  }
};

// Send thank you email to user
export const sendThankYouEmail = async (userData: any): Promise<void> => {
  try {
    if (!userData.email) {
      console.log('⚠️ No email provided for thank you message');
      return;
    }
    
    const transporter = createTransporter();
    
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h1 style="color: #667eea; text-align: center;">🌍 Payana Overseas</h1>
        <h2>Hello ${userData.name}! 👋</h2>
        <p>Thank you for your interest in ${userData.purpose === 'Study abroad' ? 'studying abroad' : 'working abroad'}!</p>
        <p>Our team will contact you within 24 hours.</p>
        <div style="text-align: center; margin-top: 30px;">
          <p><strong>📞 Phone:</strong> +91 9003619777</p>
          <p><strong>📍 Address:</strong> Payana Overseas Solutions, Erode, Tamil Nadu</p>
        </div>
      </div>
    `;
    
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: userData.email,
      subject: `🎉 Thank you ${userData.name}! - Payana Overseas`,
      html: htmlContent
    };
    
    await transporter.sendMail(mailOptions);
    console.log('✅ Thank you email sent to user');
  } catch (error) {
    console.error('❌ Error sending thank you email:', error);
    throw error;
  }
};

// EXPRESS ROUTE HANDLERS (These are what your routes need)
export const sendUGProgramEmailRoute = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('📧 UG Program Email Route Hit');
    const { userData, sessionId } = req.body;
    
    if (!userData) {
      res.status(400).json({
        success: false,
        error: 'User data is required'
      });
      return;
    }

    await sendEmailToAdmin(userData, sessionId || 'unknown');
    await sendThankYouEmail(userData);

    res.json({
      success: true,
      message: 'UG Program emails sent successfully',
      data: {
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('❌ Error in UG program email route:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to send UG program emails'
    });
  }
};

export const sendGermanProgramEmailRoute = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('📧 German Program Email Route Hit');
    const { userData, sessionId } = req.body;
    
    if (!userData) {
      res.status(400).json({
        success: false,
        error: 'User data is required'
      });
      return;
    }

    await sendEmailToAdmin(userData, sessionId || 'unknown');
    await sendThankYouEmail(userData);

    res.json({
      success: true,
      message: 'German Program emails sent successfully',
      data: {
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('❌ Error in German program email route:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to send German program emails'
    });
  }
};

export const sendConfirmationEmailRoute = async (req: Request, res: Response): Promise<void> => {
  try {
    console.log('📧 Confirmation Email Route Hit');
    const { userData } = req.body;
    
    if (!userData) {
      res.status(400).json({
        success: false,
        error: 'User data is required'
      });
      return;
    }

    await sendThankYouEmail(userData);

    res.json({
      success: true,
      message: 'Confirmation email sent successfully',
      data: {
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('❌ Error in confirmation email route:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to send confirmation email'
    });
  }
};
